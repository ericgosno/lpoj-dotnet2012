/* 
	Null Pointer Exception
	Jika file tidak berekstensi maka akan masuk ke catch dan menampilkan pesan error
 */
try
{
	ExtSplit = fileName.Split(trail2.ToCharArray(0, 1)[0])[1];
}
catch 
{
	MessageLog.Enqueue(fileName + "Deleted(Have Unknown Extension)\n");
	if (File.Exists(FilePaths[0])) File.Delete(FilePaths[0]);
	return; 
} 

/*
	Null Pointer Exception
	Jika hasil query tidak menghasilkan rows maka akan masuk ke catch 
*/
try { problem = result.First<lpoj_problem>(); }
catch { return false; }

/*
	Null Pointer Exception & Format Number Exception
	Jika hasil split variable divInfo tidak ada atau hasilnya tidak merupakan bentuk numeric
	maka akan masuk ke catch dan menampilkan pesan error
*/
try 
{ 
	divInfo = fileNameWithoutExt.Split(trail.ToCharArray(0, 1)[0]);
	if (divInfo.Length != 3) return false;
	numProblem = Convert.ToInt32(divInfo[0]);
	numContestant = Convert.ToInt32(divInfo[1]);
}
catch (Exception ex) 
{
	MessageQueue.Enqueue(ex.ToString());    
	return false; 
}

/*
	Null Pointer Exception
	Jika hasil query tidak menghasilkan rows maka akan masuk ke catch 	
*/
try { submission = result.First<lpoj_submission>();}
catch { return false; }


/*
	File Exception
	Jika file tidak ada pada directory yang ditentukan/ tidak bisa terbaca oleh streamReader
	maka akan masuk ke dalam catch
*/
try
{
	List<string> col1 = new List<string>();
	List<string> col2 = new List<string>();
	using (StreamReader sr = new StreamReader(output))
	{
		String line;
		while ((line = sr.ReadLine()) != null)
		{
			string trail = " ";
			string[] kata = line.Split(trail.ToCharArray(0, 1)[0]);
			col1.AddRange(kata);
		}
	}
	using (StreamReader sr2 = new StreamReader(nctestcase.NCTESTCASE_OUTPUT))
	{
		String line;
		while ((line = sr2.ReadLine()) != null)
		{
			string trail = " ";
			string[] kata = line.Split(trail.ToCharArray(0, 1)[0]);
			col2.AddRange(kata);
		}
	}
	bool isAccepted = true;
	if (col1.Count() == col2.Count())
	{
		for (int i = 0; i < col1.Count; i++)
		{
			if (col1[i] != col2[i])
			{
				isAccepted = false;
				break;
			}
		}
	}
	else isAccepted = false;
	//Accepted
	if (isAccepted)
	{
		lpoj_ncverdict news = lpoj_ncverdict.Createlpoj_ncverdict(ncsubmission.NCPROBLEM_ID, nctestcase.NCTESTCASE_ID, ACCEPTED, ncsubmission.NCPROBLEM_ID);
		Entity.lpoj_ncverdict.AddObject(news);                                
		ncsubmission.NCSUBMISSION_SCORE += 1;
		MessageQueue.Enqueue("Testing " + filename + " with Testcase#" + testcase.TESTCASE_ID.ToString() + " Result : Accepted\n");
	}
	else
	{
		lpoj_ncverdict news = lpoj_ncverdict.Createlpoj_ncverdict(ncsubmission.NCPROBLEM_ID, nctestcase.NCTESTCASE_ID, WRONG_ANSWER, ncsubmission.NCPROBLEM_ID);
		Entity.lpoj_ncverdict.AddObject(news);
		MessageQueue.Enqueue("Testing " + filename + " with Testcase#" + testcase.TESTCASE_ID.ToString() + " Result : Wrong Answer\n");
	}
}
catch (Exception e)
{
	lpoj_ncverdict news = lpoj_ncverdict.Createlpoj_ncverdict(ncsubmission.NCPROBLEM_ID, nctestcase.NCTESTCASE_ID, RUNTIME_ERROR, ncsubmission.NCPROBLEM_ID);
	Entity.lpoj_ncverdict.AddObject(news);
	MessageQueue.Enqueue("Testing " + filename + " with Testcase#" + testcase.TESTCASE_ID.ToString() + " Result : Runtime Error\n");
}